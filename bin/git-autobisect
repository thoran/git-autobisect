#!/usr/bin/env ruby
# git-autobisect

# 20200320
# 0.3.1

# Usage:
# 1. As this assumes that the current hash is the git bisect bad point, first checkout that revision.
# 2a. Issue a command like:
#   `git-autobisect bundle exec rspec spec/models/class.rb`
# OR
# 2b. If it's necessary to run a command before each test run, then supply that like so:
#   `git-autobisect bundle exec rspec spec/models/class.rb -p bundle`
#    which is equivalent to:
#   `git-autobisect bundle exec rspec spec/models/class.rb --preparatory_command 'bundle install'`.
# 3. And that's it!

# Changes since 0.2
# 1. Previously if gems in the Gemfile change between commits, this could fail, so have introduced the idea of a preparatory command which could be as simple as `bundle install`.
# 0/1
# 2. The preparatory command should have been optional.

require 'switches.rb'

def switches
  @switches ||= Switches.new do |s|
    s.set(:p, :preparatory_command)
  end
end

def starting_hash
  @starting_hash ||= `git rev-parse HEAD`
end

def test_file(test_command)
  test_command.split.last.split(':').first
end

def most_recent_passing_test_file_hash(test_command, preparatory_command = nil)
  reference_test_hashes = `git log --format=%H #{test_file(test_command)}`
  passing_test_file_hash = nil
  reference_test_hashes.split("\n").each do |reference_test_hash|
    system "git checkout #{reference_test_hash}"
    system preparatory_command if preparatory_command
    system test_command
    if $?.success?
      passing_test_file_hash = reference_test_hash
      break
    end
  end
  passing_test_file_hash
end

def set_bisect_bad
  system "git bisect bad #{starting_hash}"
end

def set_bisect_good(test_command, preparatory_command = nil)
  hash = most_recent_passing_test_file_hash(test_command, preparatory_command)
  raise "No version of #{test_file(test_command)} which passes was found, so I can't help you!" unless hash
  system "git bisect good #{hash}"
end

def main
  preparatory_command = switches.preparatory_command # Need to process the switches first so as it clears out ARGV of any thing which is a switch prior to assigning the test_command.
  test_command = ARGV.join(' ')
  system 'git bisect restart'
  system 'git bisect start'
  set_bisect_bad
  set_bisect_good(test_command, preparatory_command)
  system "git bisect run #{test_command}"
  system 'git bisect reset'
  system "git checkout #{starting_hash}"
end

main
