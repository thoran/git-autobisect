#!/usr/bin/env ruby
# git-autobisect

# 20141219
# 0.1.1

# Usage:
# 1. As this assumes that the current hash is the git bisect bad point, first checkout that revision.
# 2. Issue a command like `git-autobisect bundle exec rspec spec/models/class.rb` or other similar test command.
# 3. And that's it!

# Changes: 
# 1. The loop in most_recent_passing_test_file_hash() was prematurely being broken out of even if there was an unsuccessful execution of the test_command.

def starting_hash
  @starting_hash ||= `git rev-parse HEAD`
end

def test_file(test_command)
  test_command.split.last
end

def most_recent_passing_test_file_hash(test_command)
  reference_test_hashes = `git log --format=%H #{test_file(test_command)}`
  passing_test_file_hash = nil
  reference_test_hashes.split("\n").each do |reference_test_hash|
    system "git checkout #{reference_test_hash}"
    system test_command
    if $?.success?
      passing_test_file_hash = reference_test_hash
      break
    end
  end
  passing_test_file_hash
end

def set_bisect_bad
  system "git bisect bad #{starting_hash}"
end

def set_bisect_good(test_command)
  hash = most_recent_passing_test_file_hash(test_command)
  raise "No version of #{test_file(test_command)} which passes was found, so I can't help you!" unless hash
  system "git bisect good #{hash}"
end

def main
  test_command = ARGV.join(' ')
  system 'git bisect restart'
  system 'git bisect start'
  set_bisect_bad
  set_bisect_good(test_command)
  system "git bisect run #{test_command}"
  system 'git bisect reset'
  system "git checkout #{starting_hash}"
end

main
