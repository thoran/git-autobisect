#!/usr/bin/env ruby
# git-autobisect

# 20141218
# 0.0.2

# Usage:
# git-autobisect bundle exec rspec spec/models/class.rb

def test_file(test_command)
  test_command.split.last
end

def most_recent_passing_test_file_hash(test_command)
  reference_test_hashes = `git log --format=%H #{test_file(test_command)}`
  passing_test_file_hash = nil
  reference_test_hashes.split("\n").each do |reference_test_hash|
    system "git checkout #{reference_test_hash}"
    system test_command
    passing_test_file_hash = reference_test_hash if $?.success?
    break
  end
  passing_test_file_hash
end

def set_good(test_command)
  hash = most_recent_passing_test_file_hash(test_command)
  raise "No version of #{test_file(test_command)} which passes was found, so I can't help you!" unless hash
  system "git bisect good #{hash}"
end

def set_bad
  bad_hash = `git rev-parse HEAD`
  system "git bisect bad #{bad_hash}"
end

def main
  test_command = ARGV.join(' ')
  system 'git bisect start'
  set_bad
  set_good(test_command)
  system "git bisect run #{test_command}"
end

main
